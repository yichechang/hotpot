configfile: workflow.source_path('./config.yaml')

wildcard_constraints:
    sample = "[\w-]+",
    binsize = "\d+",


def get_all_sample_something(something):
    samples = config["samples"]
    return [s[something] for s in samples]

SAMPLE_NAMES = get_all_sample_something("name")


#
# top-level target rules
#
rule all:
    input:
        lambda w: expand("results/combined/{sample}_{binsize}bp.bed", 
                         sample=SAMPLE_NAMES, binsize=config['binsizes'])

rule all_envs:
    """
    Run this rule with internect access. This is a workaround for creating
    conda environments associated with rules that are not discoverable 
    until runtime (e.g., rules downstream to checkpoint rules).
    """
    input:
        expand(".envs/{env}.created",
               env=glob_wildcards("envs/{env, [\w-]+}.yaml").env)

rule make_env:
    conda:
        "envs/{env}.yaml"
    output:
        touch(".envs/{env}.created")
    shell:
        """
        sleep .5
        """


#
# actual workhorse rules
#

def get_mapped_filenames(wildcards):
    return config['bam_dir'] + config['bam_filename_pattern']

rule bam_to_bigwig:
    input:
        bam=get_mapped_filenames
    output:
        bw="results/bigwig/{sample}_{binsize}bp.bw"
    params:
        normalize=config["normalize"]
    conda: 
        "envs/deeptools.yaml"
    shell:
        """
        bamCoverage -b {input.bam:q} -o {output.bw:q} \
            --binSize {wildcards.binsize} \
            --extendReads \
            --normalizeUsing {params.normalize}
        """

rule bigwig_to_bedgraph:
    input:
        "results/bigwig/{sample}_{binsize}bp.bw"
    output:
        "results/bedgraph/{sample}_{binsize}bp.bedgraph"
    conda:
        "envs/bedtools.yaml"
    shell:
        """
        bigWigToBedGraph {input} {output}
        """

rule makewindows:
    input:
        genome=config["genome"]["hg38"]
    output:
        binned="resources/ref/binned_genome/{binsize}bp.bed"
    conda:
        "envs/bedtools.yaml"
    shell:
        """
        bedtools makewindows -g {input.genome:q} -w {wildcards.binsize} > {output.binned}
        """

# Make sure Alu names appear in column 2
# Produces a text file like:
# """
# >DF0000002.4 AluY
# >DF0000003.4 AluSc
# >DF0000007.4 AluJb
# """
rule list_alu_names:
    input:
        config['alu_families_fasta'],
    output:
        "results/alu_names.txt"
    shell:
        """
        awk '/^>/{{print}}' {input:q} > {output}
        """

rule alu_bedfile:
    input:
        alu="results/alu_names.txt",
        rmsk=config['rmsk'],
    output:
        bed="results/hg38.alu.repeats.bed"
    run:
        aluList = open(input.alu,"r")
        file = open(input.rmsk,"r")
        fOut = open(output.bed,"w")

        aluFam=[]
        for a in aluList:
            name=a.split("\n")[0].split(" ")[1]
            aluFam.append(name)
        aluList.close()

        for f in file:
            x = f.split("\t")[3]
            if x in aluFam:
                fOut.write(f)
        fOut.close()


rule truncate_alu_bedfile:
    input:
        bed="results/hg38.alu.repeats.bed"
    output:
        bed="results/alu.bed"
    params:
        n=config['alu_annotation_truncation']
    shell:
        """
        if [ {params.n} == 0 ]; then
            cp {input.bed} {output.bed}
        else
            head --lines {params.n} {input.bed:q} > {output.bed}
        fi
        """

rule count_alu_per_window:
    input:
        genome="resources/ref/binned_genome/{binsize}bp.bed",
        alu="results/alu.bed"
    output:
        "results/binned_alu/{binsize}bp.bed"
    conda:
        "envs/bedtools.yaml"
    shell:
        """
        bedtools intersect -a {input.genome} -b {input.alu:q} -c > {output}
        """

rule combine_data:
    input:
        mapped="results/bedgraph/{sample}_{binsize}bp.bedgraph",
        annotation="results/binned_alu/{binsize}bp.bed",
    output:
        "results/combined/{sample}_{binsize}bp.bed"
    conda:
        "envs/bedtools.yaml"
    shell:
        """
        bedtools map -a {input.annotation} -b {input.mapped} -c 4 -o sum > {output}
        """